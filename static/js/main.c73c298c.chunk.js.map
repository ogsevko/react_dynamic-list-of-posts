{"version":3,"sources":["api/getData.ts","components/CommentList.tsx","components/UserItem.tsx","components/PostItem.tsx","components/PostsList.tsx","App.tsx","index.tsx"],"names":["getData","API","fetch","then","response","json","catch","error","CommentList","comments","className","map","comment","key","id","name","body","email","UserItem","user","Object","values","address","slice","length","join","PostItem","post","title","PostsList","users","posts","userCopy","find","userId","filteredComments","filter","postId","App","useState","isLoading","setLoading","query","setQuery","setPosts","filteredPosts","setFilteredPosts","setUsers","setComments","filterPosts","useMemo","pattern","RegExp","test","type","onClick","usersFromServer","postsFromServer","commentsFromServer","value","onChange","event","target","ReactDOM","render","document","getElementById"],"mappings":"qOAAO,SAASA,EAAYC,GAC1B,OAAOC,MAAMD,GACVE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BC,OAAM,SAAAC,GAAK,OAAIA,KCIb,IAAMC,EAA+B,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAC1C,wBAAIC,UAAU,gBACZ,yCAEED,EAASE,KAAI,SAAAC,GAAO,OAClB,wBAAIC,IAAKD,EAAQE,GAAIJ,UAAU,sBAC7B,4BAAKE,EAAQG,MACb,2BAAIH,EAAQI,MACZ,8BAAOJ,EAAQK,aCRZC,EAA4B,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACvC,yBAAKN,IAAKM,EAAKL,GAAIJ,UAAU,cAC3B,wCAAUS,EAAKJ,KAAf,QACA,wCAAUI,EAAKF,MAAf,QACA,8BAEIG,OAAOC,OAAOF,EAAKG,SAChBC,MAAM,EAAGH,OAAOC,OAAOF,EAAKG,SAASE,OAAS,GAC9CC,KAAK,SCJHC,EAA4B,SAAC,GAAD,IAAGjB,EAAH,EAAGA,SAAUU,EAAb,EAAaA,KAAMQ,EAAnB,EAAmBA,KAAnB,OACvC,wBAAIjB,UAAU,QACZ,4BACGiB,EAAKC,OAER,2BACGD,EAAKX,MAER,kBAAC,EAAD,CAAUG,KAAMA,IAChB,kBAAC,EAAD,CAAaV,SAAUA,MCVdoB,EAA6B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOrB,EAAV,EAAUA,SAAUsB,EAApB,EAAoBA,MAApB,OACxC,wBAAIrB,UAAU,aAEVqB,EAAMpB,KAAI,SAACgB,GAET,IAAMK,EAAWF,EAAMG,MAAK,SAACd,GAAD,OAAgBA,EAAKL,KAAOa,EAAKO,UACvDC,EAAmB1B,EAAS2B,QAAO,SAACxB,GAAD,OAAsBA,EAAQyB,SAAWV,EAAKb,MAEvF,OACE,kBAAC,EAAD,CACED,IAAKc,EAAKb,GACVL,SAAU0B,EACVhB,KAAMa,EACNL,KAAMA,SCjBZ1B,EACG,4EADHA,EAEG,4EAFHA,EAGM,+EAGCqC,EAAM,WAAO,IAAD,EACSC,oBAAkB,GAD3B,mBAChBC,EADgB,KACLC,EADK,OAEGF,mBAAiB,IAFpB,mBAEhBG,EAFgB,KAETC,EAFS,OAGGJ,mBAAiB,IAHpB,mBAGhBR,EAHgB,KAGTa,EAHS,OAImBL,mBAAiB,IAJpC,mBAIhBM,EAJgB,KAIDC,EAJC,OAKGP,mBAAiB,IALpB,mBAKhBT,EALgB,KAKTiB,EALS,OAMSR,mBAAoB,IAN7B,mBAMhB9B,EANgB,KAMNuC,EANM,KA8BjBC,EAAcC,mBAAgB,WAClC,GAAc,KAAVR,EAAc,CAChB,IAAMS,EAAU,IAAIC,OAAOV,EAAO,MAElC,OAAOX,EAAMK,QAAO,SAACT,GAAD,OAClBwB,EAAQE,KAAK1B,EAAKC,QAAUuB,EAAQE,KAAK1B,EAAKX,SAIlD,OAAO,YAAIe,KACV,CAACW,IAOJ,OAAIF,EACK,4CAGY,IAAjBT,EAAMP,OAEN,4BACE8B,KAAK,SACLC,QA/CY,WAChBd,GAAW,GAEXzC,EAAcC,GACXE,MAAK,SAACqD,GACLT,EAASS,MAGbxD,EAAcC,GACXE,MAAK,SAACsD,GACLb,EAASa,GACTX,EAAiBW,MAGrBzD,EAAiBC,GACdE,MAAK,SAACuD,GACLV,EAAYU,MAGhBjB,GAAW,KA0BT,cAUF,yBAAK/B,UAAU,OACb,2BACE4C,KAAK,OACLK,MAAOjB,EACPkB,SAAU,SAACC,GAAD,OAzBMF,EAyBkBE,EAAMC,OAAOH,MAxBnDhB,EAASgB,QACTb,EAAiBG,GAFE,IAACU,KA2BlB,kBAAC,EAAD,CACE7B,MAAOA,EACPrB,SAAUA,EACVsB,MAAOc,MC/EfkB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.c73c298c.chunk.js","sourcesContent":["export function getData <T>(API: string): Promise<T[]> {\n  return fetch(API)\n    .then(response => response.json())\n    .catch(error => error);\n}\n","import React from 'react';\nimport { Comment } from './Interfaces';\n\ninterface Props {\n  comments: Comment[];\n}\n\nexport const CommentList: React.FC<Props> = ({ comments }) => (\n  <ul className=\"comment-list\">\n    <h3>Comments:</h3>\n    {\n      comments.map(comment => (\n        <li key={comment.id} className=\"comment-list__item\">\n          <h4>{comment.name}</h4>\n          <p>{comment.body}</p>\n          <span>{comment.email}</span>\n        </li>\n      ))\n    }\n  </ul>\n);\n","import React from 'react';\nimport { User } from './Interfaces';\n\ninterface Props {\n  user: User;\n}\n\nexport const UserItem: React.FC<Props> = ({ user }) => (\n  <div key={user.id} className=\"post__user\">\n    <span>{`${user.name} | `}</span>\n    <span>{`${user.email} | `}</span>\n    <span>\n      {\n        Object.values(user.address)\n          .slice(0, Object.values(user.address).length - 2)\n          .join(', ')\n      }\n    </span>\n  </div>\n);\n","import React from 'react';\nimport { User, Post, Comment } from './Interfaces';\nimport { CommentList } from './CommentList';\nimport { UserItem } from './UserItem';\n\ninterface Props {\n  comments: Comment[];\n  user: User;\n  post: Post;\n}\n\nexport const PostItem: React.FC<Props> = ({ comments, user, post }) => (\n  <li className=\"post\">\n    <h1>\n      {post.title}\n    </h1>\n    <p>\n      {post.body}\n    </p>\n    <UserItem user={user} />\n    <CommentList comments={comments} />\n  </li>\n);\n","import React from 'react';\nimport { User, Comment, Post } from './Interfaces';\nimport { PostItem } from './PostItem';\n\ninterface Props {\n  users: User[];\n  comments: Comment[];\n  posts: Post[];\n}\n\nexport const PostsList: React.FC<Props> = ({ users, comments, posts }) => (\n  <ul className=\"post-list\">\n    {\n      posts.map((post: Post) => {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const userCopy = users.find((user: User) => user.id === post.userId)!;\n        const filteredComments = comments.filter((comment: Comment) => comment.postId === post.id);\n\n        return (\n          <PostItem\n            key={post.id}\n            comments={filteredComments}\n            user={userCopy}\n            post={post}\n          />\n        );\n      })\n    }\n  </ul>\n);\n","import React, { useState, useMemo } from 'react';\nimport './App.css';\nimport { getData } from './api/getData';\nimport { Post, User, Comment } from './components/Interfaces';\nimport { PostsList } from './components/PostsList';\n\nconst API = {\n  POSTS: 'https://mate-academy.github.io/react_dynamic-list-of-posts/api/posts.json',\n  USERS: 'https://mate-academy.github.io/react_dynamic-list-of-posts/api/users.json',\n  COMMENTS: 'https://mate-academy.github.io/react_dynamic-list-of-posts/api/comments.json',\n};\n\nexport const App = () => {\n  const [isLoading, setLoading] = useState<boolean>(false);\n  const [query, setQuery] = useState<string>('');\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [filteredPosts, setFilteredPosts] = useState<Post[]>([]);\n  const [users, setUsers] = useState<User[]>([]);\n  const [comments, setComments] = useState<Comment[]>([]);\n\n  const loadPosts = () => {\n    setLoading(true);\n\n    getData<User>(API.USERS)\n      .then((usersFromServer: User[]) => {\n        setUsers(usersFromServer);\n      });\n\n    getData<Post>(API.POSTS)\n      .then((postsFromServer: Post[]) => {\n        setPosts(postsFromServer);\n        setFilteredPosts(postsFromServer);\n      });\n\n    getData<Comment>(API.COMMENTS)\n      .then((commentsFromServer: Comment[]) => {\n        setComments(commentsFromServer);\n      });\n\n    setLoading(false);\n  };\n\n  const filterPosts = useMemo<Post[]>(() => {\n    if (query !== '') {\n      const pattern = new RegExp(query, 'ig');\n\n      return posts.filter((post: Post) => (\n        pattern.test(post.title) || pattern.test(post.body)\n      ));\n    }\n\n    return [...posts];\n  }, [query]);\n\n  const handleChange = (value: string) => {\n    setQuery(value);\n    setFilteredPosts(filterPosts);\n  };\n\n  if (isLoading) {\n    return <span>Loading...</span>;\n  }\n\n  if (posts.length === 0) {\n    return (\n      <button\n        type=\"button\"\n        onClick={loadPosts}\n      >\n        Load posts\n      </button>\n    );\n  }\n\n  return (\n    <div className=\"app\">\n      <input\n        type=\"text\"\n        value={query}\n        onChange={(event) => handleChange(event.target.value)}\n      />\n      <PostsList\n        users={users}\n        comments={comments}\n        posts={filteredPosts}\n      />\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}